var g_setup_file_headers = newArray(
    "*** Auto generated by BB Macros.\n" +
    "Do not modify unless you know exactly what you are doing.\n" +
    "\n" +
    "--------------------------------------------------------------------------------\n" +
        "\tPATHS\n" +
    "--------------------------------------------------------------------------------\n" +
    "\n",
    "\n" +
    "--------------------------------------------------------------------------------\n" +
        "\tTEST BLOCK\n" +
    "--------------------------------------------------------------------------------\n" +
    "\n");

// PATHS
var g_setup_block_01_labels = newArray("Working Path: ",
                                       "Analysis Path: ",
                                       "Obs Unit Roi Path: ",
                                       "Analysis Setup File: ");

var g_setup_block_01_defaults = newArray("",
                                         "",
                                         "",
                                         "");

// TEST BLOCK
var g_setup_block_02_labels = newArray("Test value 1: ",
                                       "Test value 2: ");

var g_setup_block_02_defaults = newArray("1",
                                         "2");

var temp_directory = getDirectory("temp") +
                     "BB_macros" + File.separator() +
                     "Fibers" + File.separator();

/*
--------------------------------------------------------------------------------
    MACRO
--------------------------------------------------------------------------------
*/

macro "Global_configurator_fibers.ijm" {
    args = getArgument();
    args = split(args, "|");
    /*
        This macro understands the following arguments:
        1) "create":
            Used to set the working directories.
            The macro will create a new Global_configuration_fibers.txt
            file, prompting the user to enter the new base directory. If
            the file already exists, any configuration below Block 01, which
            contains the working directories, should be copied over into
            the new file.
        2) "change|block_index|line_index|new_value":
            Used to modify a single value in the Global_configuration_fibers.txt
            file. The block_index and line_index values start at 1, not 0. Every
            other value in the file is copied into the new file, which overwrites
            the old file.
        3) "retrieve|block_index|line_index":
            Used to retrieve a single value in the Global_configuration_fibers.txt
            file. The block_index and line_index values start at 1, not 0. The
            retrieved value is stored in the temp_directory in g_config_temp.txt.
        4) A single argument equal to one of the path_args. This case is included
            because the most frequent use of this macro is to retrieve a working
            directory or file.
        Multiple arguments must be separated by a pipe character.
    */

    global_configuration_file = getDirectory("plugins") +
                                "BB_macros" + File.separator() +
                                "Fibers_modules" + File.separator() +
                                "Global_configuration_fibers.txt";

    path_args = newArray("working_path",
                         "analysis_path",
                         "obs_unit_ROI_path",
                         "analysis_setup_file");

    if (args[0] == "create") {

        if (File.exists(global_configuration_file)) {
            first_time_setup = false;
            last_block_02_settings = get_global_configuration(2, "all");
            // Retrieve anything below Block 01 for writing to the new file,
            //     as everything will have to be written fresh.
        } else {
            first_time_setup = true;
        }

        working_path = getDirectory("Choose the directory in which image files are located:");
        analysis_path       = working_path +
                              "Analysis" + File.separator();
        obs_unit_ROI_path   = analysis_path +
                              "OBS UNIT ROIs" + File.separator();
        analysis_setup_file = analysis_path +
                              "Setup.txt";
        global_setup_block_01_choices = newArray(working_path,
                                                 analysis_path,
                                                 obsUnitRoi_path,
                                                 analysisSetupFile);

        global_configuration = File.open(global_configuration_file);
        print(global_configuration, g_setup_file_headers[0]);
        for (i=0; i<g_setup_block_01_labels.length; i++) {
            print(global_configuration,
                  g_setup_block_01_labels[i] + "\t" +
                  global_setup_block_01_choices[i]);
        }
        print(global_configuration, g_setup_file_headers[1]);
        if (first_time_setup) {
            for (i=0; i<g_setup_block_02_labels.length; i++) {
                print(global_configuration,
                      g_setup_block_02_labels[i] + "\t" +
                      g_setup_block_02_defaults[i]);
            }
        } else {
            for (i=0; i<g_setup_block_02_labels.length; i++) {
                print(global_configuration,
                      g_setup_block_02_labels[i] + "\t" +
                      last_block_02_settings[i]);
            }
        }
        File.close(global_configuration);

    } else if (args[0] == "change") {

        modify_global_setup_file(args[1], args[2], args[3]);

    } else if (args[0] == "retrieve") {

        write_retrieved_to_temp(args[1], args[2]);

    } else if (args.length == 1) {

        path_index = -1;
        for (i = 0; i < path_args.length; i++) {
            if (args[0] == path_args[i]) {
                path_index = i;
                break;
            }
        }
        write_retrieved_to_temp(1, path_index + 1);

    } else {
        exit("Invalid arguments passed to\n" +
             "Global_configurator_fibers.ijm.");
    }
}

/*
--------------------------------------------------------------------------------
    FUNCTIONS
--------------------------------------------------------------------------------
*/

// Returns a single configuration value from the global configuration
//     text file or a single block of values if line_index is "all".
//     The block_index and line_index numbering should be taken as
//     starting from 1 and not 0 when entered as arguments to this
//     function; they will be decremented by 1 within the function.
function get_global_configuration(block_index, line_index) {
    if (isNaN(parseInt(block_index)))
        exit("block_index = " + block_index + " was passed to\n" +
             "get_global_configuration().\n" +
             "\n" +
             "block_index must be a number.");
    if (block_index < 1 || block_index > g_setup_file_headers.length)
        exit("block_index = " + block_index + " was passed to\n" +
             "get_global_configuration().\n" +
             "\n" +
             "block_index must be between 1 and " + g_setup_file_headers.length + ".");
    block_index -= 1;

    if (isNaN(parseInt(line_index))) {
        line_index = toLowerCase(line_index);
        if (!matches(line_index, "all"))
            exit("line_index = " + line_index + " was passed to\n" +
                 "get_global_configuration().\n" +
                 "\n" +
                 "line_index must be a positive integer or 'all'.");
    } else {
        line_index = parseInt(line_index);
        line_index  -= 1;
    }

    raw_text = File.openAsString(global_configuration_file);

    // Cut away any text before the block of settings, including the header.
    result = substring(raw_text,
                       indexOf(raw_text,
                               g_setup_file_headers[block_index]) +
                               lengthOf(g_setup_file_headers[block_index]),
                               lengthOf(raw_text));

    // If we're not at the last block, then cut away the remaining blocks so that
    //     only the text of settings remains.
    if (block_index < g_setup_file_headers.length - 1) {
        result = substring(result,
                           0,
                           indexOf(result,
                                   g_setup_file_headers[block_index + 1]));
    }

    // Take the block of text containing the configuration settings, split it
    //     into lines, and remove the label texts so that only an array containing
    //     the settings themselves remains.
    result = split(result, "\n");
    trimmed_result = newArray();
    for (i = 0; i < result.length; i++) {
        // This is so trailing newlines don't mess up the result.
        if (lengthOf(result[i]) == 0) continue;

        append = result[i];
        append = substring(append, indexOf(append, ": \t") + lengthOf(": \t"), lengthOf(append));
        trimmed_result = Array.concat(trimmed_result, append);
    }
    if (matches(line_index, "all")) {
        return trimmed_result;
    } else {
        if (line_index < 1 || line_index > trimmed_result.length)
            exit("line_index = " + (line_index + 1) + " was passed to\n" +
                 "get_global_configuration().\n" +
                 "\n" +
                 "If line_index is a number, it must be a positive\n" +
                 "integer between 1 and " trimmed_result.length + ".");
        return trimmed_result[line_index];
    }
}

// Re-writes the entire global setup file, modifying a single configuration
//     value and preserving the remaining values.
function modify_global_setup_file(block_index, line_index, new_value) {
    if (isNaN(parseInt(block_index)))
        exit("block_index = " + block_index + " was passed to\n" +
             "get_global_configuration()\n" +
             "\n" +
             "block_index must be a number.");
    if (block_index < 1 || block_index > g_setup_file_headers.length)
        exit("block_index = " + block_index + " was passed to\n" +
             "get_global_configuration().\n" +
             "\n" +
             "block_index must be between 1 and " + g_setup_file_headers.length + ".");
    block_index -= 1;

    last_block_01_settings = get_global_configuration(1, "all");
    last_block_02_settings = get_global_configuration(2, "all");

    modified = false;

    global_configuration = File.open(global_configuration_file);

    print(global_configuration, g_setup_file_headers[0]);
    for (i = 0; i < g_setup_block_01_labels.length; i++) {
        if (block_index == 0 && line_index == i) {
            print(global_configuration, g_setup_block_01_labels[i] + "\t" + new_value);
        } else {
            print(global_configuration, g_setup_block_01_labels[i] + "\t" + last_block_01_settings[i]);
            modified = true;
        }
    }

    print(global_configuration, g_setup_file_headers[1]);
    for (i = 0; i < g_setup_block_02_labels.length; i++) {
        if (block_index == 1 && line_index == i) {
            print(global_configuration, g_setup_block_02_labels[i] + "\t" + new_value);
        } else {
            print(global_configuration, g_setup_block_02_labels[i] + "\t" + last_block_02_settings[i]);
            modified = true;
        }
    }
    File.close(global_configuration);

    if (!modified) exit("line_index = " + (line_index + 1) + " was passed to\n" +
                        "modify_global_setup_file()\n" +
                        "\n" +
                        "line_index must be between 1 and the length\n" +
                        "of Block " + (block_index + 1) " in the global setup file.");
}

// Passes its arguments to get_global_configuration and writes the
//    result to the temp file.
function write_retrieved_to_temp(block_index, line_index) {
    retrieved = get_global_configuration(block_index, line_index);
    retrieved_temp = File.open(temp_directory + "Global_configurator_fibers_temp.txt");
    print(retrieved_temp, retrieved);
    File.close(retrieved_temp);
}